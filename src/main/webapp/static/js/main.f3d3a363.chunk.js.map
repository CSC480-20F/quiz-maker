{"version":3,"sources":["pexels-anna-shvets-3683107.jpg","components/CreateQuiz.js","components/Dashboard.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CreateQuiz","props","state","name","course","message","className","id","onSubmit","this","handleSubmit","bind","method","htmlFor","type","value","onChange","onNameChange","aria-describedby","onCourseChange","rows","onMessageChange","event","setState","target","React","Component","Dashboard","authInstance","window","gapi","auth2","getAuthInstance","profile","currentUser","get","getBasicProfile","getName","imageUrl","getImageUrl","src","logo","alt","Dropdown","Toggle","as","Menu","Item","onClick","signOut","Login","load","signin2","render","Card","border","style","width","height","display","margin","Body","textAlign","fontSize","fontFamily","Font","Text","justifyContent","alignItems","padding","App","isSignedIn","init","client_id","then","listen","script","document","createElement","onload","initializeGoogleSignIn","body","appendChild","exact","path","ifUserSignedIn","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f3d3a363.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pexels-anna-shvets-3683107.96ab9e62.jpg\";","\r\nimport React from 'react'\r\n\r\n\r\nclass CreateQuiz extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          name: '',\r\n          course: '',\r\n          message: ''\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        return(\r\n        <div className=\"App\">\r\n        <form id=\"contact-form\" onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\r\n        <div className=\"form-group\">\r\n        <label htmlFor=\"name\">Name of the Quiz</label>\r\n        <input type=\"text\" className=\"form-control\" value={this.state.name} onChange={this.onNameChange.bind(this)} />\r\n        </div>\r\n        <div className=\"form-group\">\r\n        <label htmlFor=\"exampleInputCourse1\">Course</label>\r\n        <input type=\"course\" className=\"form-control\" aria-describedby=\"courseHelp\" value={this.state.course} onChange={this.onCourseChange.bind(this)} />\r\n        </div>\r\n        <div className=\"form-group\">\r\n        <label htmlFor=\"message\">Put your questions here</label>\r\n        <textarea className=\"form-control\" rows=\"5\" value={this.state.message} onChange={this.onMessageChange.bind(this)} />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n        </form>\r\n        </div>\r\n );\r\n}\r\n\r\n  onNameChange(event) {\r\n\tthis.setState({name: event.target.value})\r\n  }\r\n\r\n  onCourseChange(event) {\r\n\tthis.setState({course: event.target.value})\r\n  }\r\n\r\n  onMessageChange(event) {\r\n\tthis.setState({message: event.target.value})\r\n  }\r\n\r\nhandleSubmit(event) {\r\n}\r\n}\r\n    \r\nexport default CreateQuiz;\r\n\r\n","import React from 'react'\r\nimport {Dropdown} from 'react-bootstrap'\r\nimport logo from '../pexels-anna-shvets-3683107.jpg'; \r\nimport CreateQuiz from './CreateQuiz';\r\n\r\nconst Dashboard = () => {\r\n    const authInstance = window.gapi.auth2.getAuthInstance()\r\n    const user = authInstance.currentUser.get()\r\n    const profile = user.getBasicProfile()\r\n    const name = profile.getName()\r\n    //const email = profile.getEmail()\r\n    const imageUrl = profile.getImageUrl()\r\n\r\n    return (\r\n        <>\r\n            <nav>\r\n            <img className=\"home-logo\" src ={logo} alt =\"=main page\"/>\r\n                <div>QuizMaker</div>\r\n                \r\n                <img className=\"push\" src={imageUrl} alt=\"Profile\"/>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle as=\"a\">\r\n                        {name}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={authInstance.signOut}>Sign out</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </nav>\r\n\r\n            <div className=\"container\">\r\n                <CreateQuiz/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Font from '../App.css'\r\n\r\n\r\nclass Login extends React.Component {\r\n    componentDidMount() {\r\n        window.gapi.load('signin2', () => {\r\n            window.gapi.signin2.render('login-button')\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className = \"login\">\r\n            <Card border=\"black\" style={{ width: '25rem', height:'20rem', display: 'center', margin: 'auto' }}>\r\n            {/* <Card.Header style ={{textAlign: \"center\", fontSize:\"30px\"}}><b>QuizMaker</b></Card.Header>  */}\r\n            <Card.Body style ={{textAlign: \"center\", fontSize:\"50px\", height: '20rem', width: '24.5rem', fontFamily: Font}}><b>QuizMaker</b>\r\n              <Card.Text>\r\n              <div id=\"login-button\" style = {{display: 'flex',  justifyContent:'center', alignItems: 'center', padding: '10%'}}>Sign in with Google</div>\r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\r\nimport Dashboard from './components/Dashboard';\r\nimport LoginPage from './components/Login';\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n          isSignedIn: null\r\n      }\r\n  }\r\n\r\n  initializeGoogleSignIn() {\r\n    window.gapi.load('auth2', () => {\r\n      window.gapi.auth2.init({\r\n        client_id: '11698435631-cav1if2lia71joo1icee09aik0la3k1n.apps.googleusercontent.com'\r\n      }).then(() => {\r\n        const authInstance =  window.gapi.auth2.getAuthInstance()\r\n        const isSignedIn = authInstance.isSignedIn.get()\r\n        this.setState({isSignedIn})\r\n        authInstance.isSignedIn.listen(isSignedIn => {\r\n          this.setState({isSignedIn})\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    const script = document.createElement('script')\r\n    script.src = 'https://apis.google.com/js/platform.js'\r\n    script.onload = () => this.initializeGoogleSignIn()\r\n    document.body.appendChild(script)\r\n  }\r\n\r\n\r\n  ifUserSignedIn(Component) {\r\n      if (this.state.isSignedIn === null) {\r\n          return (\r\n              <h1>Loading...</h1>\r\n          )\r\n      }\r\n      return this.state.isSignedIn ?\r\n          <Component/> :\r\n          <LoginPage/>\r\n  }\r\n\r\n  render() {\r\n      return (\r\n          <BrowserRouter>\r\n              <Switch>\r\n                  <Route exact path=\"/\" render={() => this.ifUserSignedIn(Dashboard)}/>\r\n                  <Route path=\"/dashboard\" render={() => this.ifUserSignedIn(Dashboard)}/>\r\n              </Switch>\r\n          </BrowserRouter>\r\n      )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}